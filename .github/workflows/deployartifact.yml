name: Deploy artifact
on:
  repository_dispatch:
    types: [deploy-artifact-event]
jobs:
  dowload-artifact-job:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:

# Devuelve parametros desde payload y descarga el artefacto


      - run: echo ${{ github.event.client_payload.checksum }}

      - name: Retrieve Payload
        run: |
          echo ${{ github.event.client_payload.checksum }}

      - uses: dawidd6/action-download-artifact@v2
        id: download-artifact
        with: 
          github_token: ${{ secrets.TOKEN }}
          workflow: publish-jar.yml
          workflow_conclusion: success
          name: artifactjar
          path: /tmp/artifactjar

      - name: Display structure of downloaded files
        run: ls -R /tmp/artifactjar 

      - name: checksum of download artifact  
        if: success()
        id: hash
        run: 
             echo ${{ github.event.client_payload.artifact_name }}
             echo "HASH=$(sha1sum /tmp/artifactjar/${{ github.event.client_payload.artifact_name }} | awk '{ print $1 }')" >> $GITHUB_ENV
             echo env.HASH
             echo $GITHUB_ENV

      - name: compare checksum
        run: |
          if [ "${{ env.HASH }}" == "${{ github.event.client_payload.checksum }}" ]; then 
              echo "The checksum are equals! successfully operations"
          else
              echo "The cheksum are NOT equals! failure operation."
              exit 1;
          fi

# Descarga source code de la rama default para poder devolver Dockerfile y cargar la imagen ak cibtexti 


      - uses: actions/checkout@v3
        if: success()
      - run: |
          echo print the current directory show files
          ls -la 
          echo preparing docker build context 
          cp .docker/Dockerfile /tmp/Dockerfile
          cp /tmp/artifactjar/${{ github.event.client_payload.artifact_name }} /tmp/${{ github.event.client_payload.artifact_name }}
          ls -la /tmp

      - name: upload artifact 
        uses: actions/upload-artifact@v3
        with:
          name: dockerBuildContext
          path: |
            /tmp/Dockerfile
            /tmp/${{ github.event.client_payload.artifact_name }}

###################################################
#Job 2 para administrar las tareas de docker
###################################################
  docker_job:
    needs:
      - dowload-artifact-job

    runs-on: ubuntu-latest
    permissions:
      contents: read 
      actions: read
      packages: write 
    steps:

    #1.-  Instaran el emulador QEMU
    - name : Set up QEMU
      uses : docker/setup-qemu-action@v2

    #2.-  instalr docker buildx
    - name : Set up Docker Buildx 
      uses : docker/setup-buildx-action@v2

    #3.- login Docker Hub
    - name : Login to Docker Hub
      uses : docker/login-action@v2
      with :
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.TOKEN }}

    #4.- Descarga artifact
    - name:  Download artifact
      uses:  actions/download-artifact@v3
      with: 
        name: DockerBuildContext
        path: ./dockerBuildContext 
    
    #5.- Muestra la estructura
    - name: Display structure of downloaded  files
      run: ls -R dockerBuildContext

     #6.- Muestra la estructura 
    - name: Build and push image using action
      uses: docker/build-push-action@v4
      with: 
        context:  ./docketBuildContext # Ubicacion donde se almacenan los archivos dockerfile y artifact
        file : ./dockerBuildContext/Dockerfile #Ubicacion del dockerfile
        # parametros requeridos por el dockerfile
        build-args:  |
          JAR_FILE=${{ github.event.client_payload.artifact_name }} 
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        push: true # Sube la imagen al registry, se encuentra en false por Default
        tags: ghcr.io/${{ github.repository_owner}}/product:${{ github.sha }} #nombre completo de la imagen, incluye el repositorio, usuario, nombre de la imagen y tag



